(* specification of abnf following rfc 2234 *)
open P4_lib

let ss_concat = P1_lib.ss_concat

let c = content

let ws = (parse_RE "[ \n]*")
let wsplus = (parse_RE "[ \n]+")

let eps = a ""

let eof = parse_EOF ()

let dest_Some x = (match x with
    | None -> (failwith "dest_Some: tu6")
    | Some x -> x)

open Sexplib.Std

type ty_option = OPTION of alternation 
and group = GROUP of alternation 
and element = EL_RULENAME of rulename | EL_GROUP of group | EL_OPTION of ty_option | EL_CHAR_VAL (* FIXME *) | EL_NUM_VAL | EL_PROSE_VAL 
and repeat = REPEAT of int option * int option
and repetition = REP of (repeat option * element) 
and concatenation = CONCATENATION of repetition list 
and alternation = ALTERNATION of concatenation list 
and elements = ELEMENTS of alternation 
and defined_as = DAS_EQUAL | DAS_EQUAL_SLASH 
and rulename = RULENAME of string 
and rule = RULE of (rulename * defined_as * elements) 
and rulelist_elt = RE_RULE of rule (* | RE_CWSP_CNL of string *)
and rulelist = RULELIST of rulelist_elt list (* nonempty *) with sexp

let rulename = parse_RE "[A-Za-z][-A-Za-z0-9]*"
let dquote = a "\""
let char_vals = parse_RE "[^\"]*"
let one_star_bit = parse_RE "[01]+"
let bin_val_rest = parse_RE "\\([.][0-1]+\\)+\\|[-][0-1]+"
let one_star_digit = parse_RE "[0-9]+"
let dec_val_rest = parse_RE "\\([.][0-9]+\\)+\\|[-][0-9]+"
let one_star_hexdig = parse_RE "[0-9A-Fa-f]+"
let hex_val_rest = parse_RE "\\([.][0-9A-Fa-f]+\\)+\\|[-][0-9A-Fa-f]+"
let prose_val_chars = parse_RE "[^>]*"
let crlf = parse_RE "[\n]" (* FIXME really CR LF *)
let vchar = parse_RE "[\x21-\x7E]"
let wsp = parse_RE "[ \x09]"
let num = parse_RE "[0-9]+"

let parse_S = 
<<g<<

S -> ?ws? RULELIST ?ws? ?eof? {{ x2 |> sexp_of_rulelist |> Sexplib.Sexp.to_string_hum |> print_endline }}

(* ambiguity in rfc 2234: <<r = a b c \n ; comment>> the comment can attach to elements or be a separate rulelist_elt *)

RULELIST -> 
  RULE WS_AND_COMMENTS RULELIST_REST    {{ match x3 with RULELIST(xs) -> RULELIST(RE_RULE(x1)::xs) }}

RULELIST_REST ->
  ?eps?                                 {{ RULELIST([]) }}
  | RULELIST                            {{ x1 }}

WS_AND_COMMENTS -> 
  ?eps?                                 {{ x1 }}
  | STAR_CWSP CNL WS_AND_COMMENTS       {{ ss_concat [x1;x2;x3] |> dest_Some }}

RULE -> RULENAME STAR_CWSP DEFINED_AS STAR_CWSP ELEMENTS {{ RULE(x1,x3,x5) }}

RULENAME -> ?rulename?                  {{ RULENAME (c x1) }}

DEFINED_AS -> EQUAL_OR_EQUAL_SLASH      {{ x1 }}

EQUAL_OR_EQUAL_SLASH -> 
  "="                                   {{ DAS_EQUAL }}
  | "=/"                                {{ DAS_EQUAL_SLASH }}

ELEMENTS -> ALTERNATION                 {{ ELEMENTS(x1) }}

ALTERNATION -> 
  CONCATENATION                         {{ ALTERNATION([x1]) }}
  | CONCATENATION STAR_CWSP "/" STAR_CWSP ALTERNATION {{ match x5 with ALTERNATION(xs) -> ALTERNATION(x1::xs) }}

CONCATENATION -> 
  REPETITION                            {{ CONCATENATION([x1]) }}
  | REPETITION ONE_STAR_CWSP CONCATENATION {{ match x3 with CONCATENATION(xs) -> CONCATENATION(x1::xs) }}

REPETITION -> 
  ELEMENT                               {{ REP(None,x1) }}
  | REPEAT ELEMENT                      {{ REP(Some(x1),x2) }}

REPEAT -> 
  ?num?                                 {{ let x = c x1 |> int_of_string in REPEAT(Some x,Some x) }}
  | "*"                                 {{ REPEAT(None,None) }}
  | ?num? "*"                           {{ let x = c x1 |> int_of_string in REPEAT(Some x,None) }}
  | "*" ?num?                           {{ let x = c x2 |> int_of_string in REPEAT(None,Some x) }}
  | ?num? "*" ?num?                     {{ REPEAT(Some(c x1|>int_of_string),Some(c x3|>int_of_string)) }}

ELEMENT ->
  RULENAME                              {{ EL_RULENAME x1 }}
  | GROUP                               {{ EL_GROUP x1 }}
  | OPTION                              {{ EL_OPTION x1 }}
  | CHAR_VAL                            {{ EL_CHAR_VAL }}
  | NUM_VAL                             {{ EL_NUM_VAL }}
  | PROSE_VAL                           {{ EL_PROSE_VAL }}

GROUP -> "(" STAR_CWSP ALTERNATION STAR_CWSP ")" {{ GROUP(x3) }}

OPTION -> "[" STAR_CWSP ALTERNATION STAR_CWSP "]" {{ OPTION(x3) }}



(* whitespace and comments *)
STAR_WSP_VCHAR -> 
  ?eps?                                 {{ x1 }}
  | ?wsp? STAR_WSP_VCHAR                {{ ss_concat [x1;x2] |> dest_Some }}
  | ?vchar? STAR_WSP_VCHAR              {{ ss_concat [x1;x2] |> dest_Some }}

COMMENT -> ";" STAR_WSP_VCHAR ?crlf?    {{ ss_concat [x1;x2;x3] |> dest_Some }}

CNL -> 
  COMMENT                               {{ x1 }}
  | ?crlf?                              {{ x1 }}

CWSP -> 
  ?wsp?                                 {{ x1 }}
  | CNL ?wsp?                           {{ ss_concat [x1;x2] |> dest_Some }}

STAR_CWSP -> 
  ?eps?                                 {{ x1 }}
  | CWSP STAR_CWSP                      {{ ss_concat [x1;x2] |> dest_Some }}

STAR_CWSP_CNL -> (* can start with ws *)
  CNL                                   {{ x1 }}
  | CWSP STAR_CWSP_CNL                  {{ ss_concat [x1;x2] |> dest_Some }}

ONE_STAR_CWSP -> CWSP STAR_CWSP         {{ () }}






(*char-val       =  DQUOTE *(%x20-21 / %x23-7E) DQUOTE
                               ; quoted string of SP and VCHAR
                               ; without DQUOTE *)
CHAR_VAL -> ?dquote? ?char_vals? ?dquote? {{ ss_concat [x1;x2;x3] |> dest_Some }}

NUM_VAL -> "%" NUM_VAL_REST             {{ ss_concat [x1;x2] |> dest_Some }}

NUM_VAL_REST ->
  BIN_VAL                               {{ x1 }}
  | DEC_VAL                             {{ x1 }}
  | HEX_VAL                             {{ x1 }}

BIN_VAL -> "b" ?one_star_bit? ?bin_val_rest? {{ ss_concat [x1;x2;x3] |> dest_Some }}

DEC_VAL -> "d" ?one_star_digit? ?dec_val_rest? {{ ss_concat [x1;x2;x3] |> dest_Some }}

HEX_VAL -> "x" ?one_star_hexdig? ?hex_val_rest? {{ ss_concat [x1;x2;x3] |> dest_Some }}

PROSE_VAL -> "<" ?prose_val_chars? ">"  {{ x2 }}
>>g>>
!_S


(*
Local Variables:
mode: tuareg
End:
*)
