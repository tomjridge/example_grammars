
  - processing of ws and comments in abnf_grammar is not clear, and certainly ambiguous
  - some items such as DEFINED_AS can start with ws
  - a lot of elements can end with ws even if they are not wsp-type symbols eg rule
  - comments within a rule should attach to the rule itself, but
    comments after are, according to the grammar, partly attached to
    elements and partly attached to cnl in the rule production
  - effectively, the goal seems to be to allow comments in reasonable
    places, but not really bother about where they are attached
  - we can distinguish 3 types of wsp:
    - spaces, and spaces and tabs
    - with comments and newlines (CNL matches comments and newlines,
      and this is the only way newlines can be matched)
  - the first step is to make explicit where the ws is
  - STAR_CONCATENATION_REST
    - can begin with ws, but not end and refers to itself
    - CONCATENATION is REPETITION, possibly repeated and separated by ONE_STAR_CWSP
  - STAR_ALTERNATION_REST
    - ALTERNATION is CONCATNEATION possibly repeated and separated

  - after transforming the grammar to make ws processing more
    apparent, we have the following:

>    RULELIST_ELT -> 
>      RULE STAR_CWSP CNL                    {{ RE_RULE(x1) }}
>     | STAR_CWSP_CNL                       {{ RE_CWSP_CNL(c x1) }} 

  - CWSP matches at least one whitespace character; can match a
    comment, but subsequent line must start with at least one
    character of wsp
  - STAR_CWSP can be eps, or can match a comment, followed by
    whitespace at beginning of line, or multiple comments followed by
    ws at beginning of line
  - this is ambiguous in several ways:
    - a rule `rn = a b c ; comm CRLF` must have the comment attached
      to the rule (because CNL matches the crlf end of line, but
      STAR_CWSP does not match an end of line)
    - but STAR_CWSP may also match multiple comments separated by at least one whitespace
    - STAR_CWSP_CNL matches ws followed by comment followed by
      newline; thus `rn = a b c ; comm1 CRLF ; comm2 CRLF` can have
      the second comment attached to the rule, or parsed as a separate RULELIST_ELT
    - so `rn = a b c ; comm1 CRLF;comm2` must have comm2 as a separate
      rulelist_elt because it is not indented by ws
    - thus, a possible fix is to make the STAR_CWSP_CNL alternative be simply PLUS_CNL
    - this means that you cannot have isolated comments with ws at the
      beginning eg the following is not allowed:

r = a b c ; comm
; comm
 ; comm

     - the intuition is that a `;comm` starting at the beginning of
       the line cannot attach to the rule (this is what rfc 2234
       specifies); but then subsequent comments cannot be indented
       (which is not enforced by rfc 2234)
     - but this also precludes a line that has just ws
     - it is not really clear why CWSP after a rule must parse a
       newline followed by at least one ws; a better fix might be to
       say that a rulelist_elt can be a rule, or star_CWSP_CNL
  - an alternative fix to the current is to view a abnf file a a
    sequence of rules, where each rule may have trailing comments and
    whitespace; but the current approach have a rule not start or end
    with ws, which is a useful invariant

--

  - adding p4 combinators for abnf constructs; main difficulties
    - grouping
    - various forms of repetition
  - repetition
    - a bit like itern and star
    - for simplicity of impl, may distinguish cases n*m, `*m`, `n*` and *
    - n* is just itern >- star
    - *m is 0*m
    - 0*m is worth implementing separately
    - n*m is presumably a bit like itern; can be iter n >- (0*(m-n))
  - grouping
    - want to allow anonymous parsers in rhs; can we do this already?

--

  - for code generation, we need to decide what the "actions" should do
  - simplest is to produce a tree, where nodes are labelled as the
    nonterminal, and children can substrings (representing parsed
    terminals), or nodes (for nonterminals); for grouping, we need to
    do something different; perhaps the easiest is just to produce
    sexps? (or polymorphic variant trees)
  - if we assume every action produces an sexp, then processing should
    be fairly straight forward
