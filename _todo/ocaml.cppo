(* we allow to work with both p1 and p4 *)
open P1_lib

let dest_Some x = (match x with
    | None -> (failwith "dest_Some: sdi")
    | Some x -> x)

(* terminal parsers for P1 *)
module T1 = struct

  open P1_lib

  let c = content
  let eof = parse_EOF
  
  let num = parse_RE "[0-9]+"
  let notdquote = until_a "\""
  let notsquote = until_a "'"
  
  let _Ident = parse_RE "[A-Z][A-Za-z0-9_]*"
  
  let keywords = ["let";"in";"if";"then";"else";"rec";"match";"with"]
  let ident = parse_RE "[a-z][A-Za-z0-9_]*"
  let ident x = 
    x |> ident 
    |> List.filter (fun (x,_) -> not (List.mem (c x) keywords))
  
  let reserved_Idents = ["List";"String";"Hashtbl"]
  let constr x = x |> _Ident |> List.filter (fun (x,_) -> not (List.mem (c x) reserved_Idents))
  
  
  let comment = ((a "(*") **> (until_a "*)") **> (a "*)")) >> (fun (x,(y,z)) -> ss_concat [x;y;z] |> dest_Some)
  
  let ws = (parse_RE "[ \n]*")
  let ws = ws ||| ((ws **> comment **> ws) >> (fun (x,(y,z)) -> ss_concat [x;y;z] |> dest_Some))
  let w = ws
  
end

(* for P4, we have to convert some of the T1 parsers into P4 parsers *)
module T4 = struct
  
  open P4_lib

  let p1_to_p4 p1 = mktmparser_raw (fun ss -> ss |> toinput |> p1 |> List.map fst |> List.map (fun (`SS(s,i,j)) -> j))

  let c = T1.c
  let eof = parse_EOF ()
  let num = p1_to_p4 T1.num
  let notdquote = p1_to_p4 T1.notdquote
  let notsquote = p1_to_p4 T1.notsquote
  let _Ident = p1_to_p4 T1._Ident

  let ident = p1_to_p4 T1.ident  
  let constr = p1_to_p4 T1.constr
  let comment = p1_to_p4 T1.comment
  let ws = p1_to_p4 T1.ws
  let w = ws

end

#ifdef P4 
open T4
open P4_lib
#else
open T1
#endif







(* mappings for producing latex *)
module Tex = struct
  let texify_underscore s = (Str.global_replace (Str.regexp "[_]") "\\_" s) 

  let valuename s = (
    let f1 s = (
    "\\textit{"
    ^(texify_underscore s)
    ^"}")
    in 
    let s = (match s with
        (* replace these with any ad-hoc transformations of valuenames you need *)
      | "ss4" -> "ss" 
      | "lc4" -> "lc"
      | "oracle4" -> "oracle"
      | "rules7" -> "rules"
      | "tmparsers7" -> "tmparsers"
      | _ -> s)
    in
  f1 s)

  let module_name s = "\\textsf{"^s^"}"
  
  let module_path s = "\\textsf{"^s^"}"
  
  let constr s = "\\textsf{"^(texify_underscore s)^"}"
  
  let _type s = s
  
  let ident s = s

  (* convert a string to latex whitespace *)
  let rec to_whitespace s = (
   if s = "" then "" else
   let c = s.[0] in
   (if c='\n' then "\\\\\n" else "\\ ")^(to_whitespace (String.sub s 1 (String.length s - 1))))
                                     
  let w s = to_whitespace(content s)

  let _CONSTRNAME s = "\\textsf{" ^(texify_underscore s) ^"}"
 
  let _TYPECONSTRNAME s = ("\\textsf{"^(texify_underscore s)^"}")

  let tyvar s = 
    if s = "'a" then "\\alpha" else 
    if s = "'b" then "\\beta" else 
    if s = "'c" then "\\gamma" else 
    if s = "'d" then "\\delta" else 
    if s = "'e" then "\\epsilon" else 
    if s = "'f" then "\\zeta" else 
    "\\textit{"
    ^(texify_underscore s)
    ^"}"

end (* Tex *)


#ifdef P4 
let parse_S = 
#endif

<<g<<

(* the expressions we want to parse at top-level *)
S -> ?w? DEFN ?w? ?eof?                                     {{ x2 }}
| ?w? TYPEDEFINITIONS ?w? ?eof?                             {{ x2 }}
| ?w? TYPEXPR ?w? ?eof?                                     {{ x2 }}
| ?w? "e:" EXPR ?w? ?eof?                                   {{ x3 }}
| w1=?w? "val" w2=?w? i=EXPR w3=?w? ":" w4=?w? ty=TYPEXPR ?w? ?eof? {{ (Tex.w w1)^"\\textsf{val}"^(Tex.w w2)^i^(Tex.w w3)^":"^(Tex.w w4)^ty }}


DEFN ->
    "let" w1=?w? e1=LETBINDING                              {{ "\\textsf{let}"^(Tex.w w1)^e1 }}
  | "let" w0=?w? "rec" w1=?w? e1=LETBINDING                 {{ "\\textsf{let}"^(Tex.w w0)^"\\textsf{rec}"^(Tex.w w1)^e1 }}

TYPEDEFINITIONS -> TYPEDEFINITION                           {{ x1 }}
  | TYPEDEFINITION ?w? TYPEDEFINITIONS                      {{ x1^(Tex.w x2)^x3 }}


(* 6.3 Names *)

VALUENAME -> ?ident?                                        {{ Tex.valuename(c x1) }}

INFIXOP -> "="                                              {{ c x1 }}
  | "++"                                                    {{ c x1 }}
  | "::"                                                    {{ c x1 (* FIXME not an infix ?*) }}
  | "<"                                                     {{ c x1 }}
  | "<="                                                    {{ "{\\le}" }}

  | "+"                                                     {{ c x1 (* FIXME not an infix ?*) }}
  | "@"                                                     {{ "++" (* FIXME not an infix ?*) }}
  | "&&"                                                    {{ "{\\&\\&}" }}
  | "||"                                                    {{ c x1 }}
  | "***>"                                                  {{ "{\\otimes}" }}
  | "||||"                                                  {{ "{\\oplus}" }}
  | ">>>>"                                                  {{ "{\\gg}" }}
  | ">>="                                                   {{ "{{\\gg}\\!\\!=}" }}
  | "|||"                                                   {{ c x1 }}

FIELDNAME -> ?ident?                                        {{ Tex.valuename(c x1) }}


VALUEPATH -> VALUENAME                                      {{ x1 }}
  | MODULEPATH "." VALUENAME                                {{ x1^"."^x3 }}

(* this was ?Ident? but we don't want List.map interpreted as CONSTR.FIELDNAME *)
CONSTR ->
    ?constr?                                                {{ Tex.constr (c x1) }}

MODULEPATH -> ?_Ident?                                      {{ Tex.module_path (c x1) }}
  | MODULEPATH "." ?_Ident?                                 {{ x1^"."^(Tex.module_path (c x3)) }}



(* 6.4 Type expressions; following for type defns FIXME needs tidying up  *)

TYPEXPR -> "'" ?ident?                                      {{ Tex.tyvar ([x1;x2]|>ss_concat|>dest_Some|>c) }}
  | "(" w1=?w? t=TYPEXPR w2=?w? ")"                         {{ "("^(Tex.w w1)^t^(Tex.w w2)^")" }}
  | t1=TYPEXPR w1=?w? "->" w2=?w? t2=TYPEXPR                {{ t1^(Tex.w w1)^"{\\rightarrow}"^(Tex.w w2)^t2 }}
  | s1=TYPEXPR w1=?w? "*" w2=?w? s2=TYPEXPR                 {{ s1^(Tex.w w1)^"{\\times}"^(Tex.w w2)^s2 }} (* FIXME ambiguity *)
  | TYPECONSTR                                              {{ x1 }}
  | s2=TYPECONSTR w1=?w? s1=TYPEXPRA                        {{ Tex._type (s2^(Tex.w w1)^s1) }}

TYPEXPRA -> TYPEXPR                                         {{ x1 }}
  | TYPEXPR ?w? TYPEXPRA                                    {{ x1^(Tex.w x2)^x3 }}

OCAMLTYPEXPR -> "'" ?ident?                                 {{ Tex.tyvar ([x1;x2]|>ss_concat|>dest_Some|>c) }}
  | "(" w1=?w? t=TYPEXPR w2=?w? ")"                         {{ "("^(Tex.w w1)^t^(Tex.w w2)^")" }}
  | t1=TYPEXPR w1=?w? "->" w2=?w? t2=TYPEXPR                {{ t1^(Tex.w w1)^"{\\rightarrow}"^(Tex.w w2)^t2 }}
  | s1=TYPEXPR w1=?w? "*" w2=?w? s2=TYPEXPR                 {{ s1^(Tex.w w1)^"{\\times}"^(Tex.w w2)^s2 }} (* FIXME ambiguity *)
  | TYPECONSTR                                              {{ x1 }}
  | s1=TYPEXPR w1=?w? s2=TYPECONSTR                         {{ Tex._type (s1^(Tex.w w1)^s2) (* FIXME try and map types at a higher level as well *)  }}
  | "(" w1=?w? s1=TYPEXPRA w2=?w? ")" w3=?w? s2=TYPECONSTR  {{ "("^(Tex.w w1)^s1^(Tex.w w2)^")"^(Tex.w w3)^s2 }}

OCAMLTYPEXPRA -> TYPEXPR                                    {{ x1 }}
  | TYPEXPR ?w? "," ?w? TYPEXPRA                            {{ x1^(Tex.w x2)^","^(Tex.w x4)^x5 }}

(*
  | "(" ?w? TYPE ?w? ")"                                    {{ fun (b1,(w1,(s1,(w2,b2)))) -> ccat [b1;w1;s1;w2;b2] }}
  | TYPE ?w? ?ident?                                        {{ fun (t,(_,i)) -> t^" "^(map_type (content i)) }}
  | MODULEPATH "." TYPEXPR                                  {{ fun (s1,(_,s2)) -> map_type (s1^"."^s2) }}
  | TYPEXPR ?w? TYPECONSTR                                  {{ fun (s1,(w1,s2)) -> s1^(w w1)^s2 }}
*)

TYPECONSTR -> TYPECONSTRNAME                                {{ x1  }}
  | MODULEPATH "." TYPECONSTRNAME                           {{ Tex._type(x1^"."^x3) }}

POLYTYPEXPR -> TYPEXPR                                      {{ (* FIXME *) x1 }}




(* 6.5 Constants *)

CONSTANT -> CONSTR                                          {{ x1 }}
  | "[" ?w? "]"                                             {{ "["^(Tex.w x2)^"]" }}
  | ?num?                                                   {{ c x1 }}
  | "-" ?num?                                               {{ (c x1)^(c x2) }}
  | '"' s=?notdquote? '"'                                   {{ ("{\\texttt{\"" ^ (c s) ^ "\"} }") }}
  | "'" s=?notsquote? "'"                                   {{ ("'"^(c s)^"'") }}
  | "()"                                                    {{ c x1 }}



(* 6.6 Patterns *)

PATTERN -> EXPR                                             {{ x1 }}

(* 6.7 Expressions ; grammar is too ambiguous so we identify atomic expressions which can be arguments to functions *)

EXPR -> ATEXPR                                              {{ x1 }}
  | e=EXPR ":" t=TYPEXPR                                    {{ e^":"^t }}
  | EXPR ?w? "," ?w? EXPRA                                  {{ x1^(Tex.w x2)^(c x3)^(Tex.w x4)^x5 }}
  | CONSTR ?w? EXPR                                         {{ x1^(Tex.w x2)^x3 }}
  | EXPR ?w? "::" ?w? EXPR                                  {{ x1^(Tex.w x2)^(c x3)^(Tex.w x4)^x5 }}
  | FNARGS                                                  {{ x1  }}
  | EXPR ?w? INFIXOP ?w? EXPR                               {{ x1^(Tex.w x2)^(x3)^(Tex.w x4)^x5 }}
  | "if" w1=?w? e1=EXPR w2=?w? "then" w3=?w? e2=EXPR w4=?w? "else" w5=?w? e3=EXPR
                                                            {{ ("\\textsf{if}"^(Tex.w w1)^e1^(Tex.w w2)^"\\textsf{then}"^(Tex.w w3)^e2^(Tex.w w4)^"\\textsf{else}"^(Tex.w w5)^e3) }}
  | "match" w1=?w? e=EXPR w2=?w? "with" w3=?w? cs=PATTERNMATCHING w4=?w? "end"
                                                            {{ ("\\textsf{match}"^(Tex.w w1)^e^(Tex.w w2)^"\\textsf{with}"^(Tex.w w3)^((*String.concat "||"*) cs)^(Tex.w w4)^("\\textsf{end}")) }}
  | "let" w1=?w? e1=LETBINDING w2=?w? "in" w3=?w? e2=EXPR
                                                            {{ "\\textsf{let}"^(Tex.w w1)^e1^(Tex.w w2)^"\\textsf{in}"^(Tex.w w3)^e2 }}
  | "let" w0=?w? "rec" w1=?w? e1=LETBINDING w2=?w? "in" w3=?w? e2=EXPR
                                                            {{ "\\textsf{let}"^(Tex.w w0)^"rec"^(Tex.w w1)^e1^(Tex.w w2)^"\\textsf{in}"^(Tex.w w3)^e2 }}
  | "fun" w1=?w? e1=MULTIPLEMATCHING
                                                            {{ "\\textsf{fun}"^(Tex.w w1)^e1 }}
(* FIXME List.map parses as ATEXPR "." FIELDNAME, where ATEXPR is CONSTANT CONSTR *)

ATEXPR ->
    VALUEPATH                                               {{ x1 }}
  | CONSTANT                                                {{ x1 }}
  | "(" w1=?w? e1=EXPR w2=?w? ")"                           {{ "("^(Tex.w w1)^e1^(Tex.w w2)^")" }}
  | "[" w1=?w? ss=EXPRLIST w2=?w? "]"                       {{  "["^(Tex.w w1)^ss^(Tex.w w2)^"]" }}
  | RECORD                                                  {{ x1 }}
  | s1=ATEXPR "." s2=FIELDNAME                              {{  s1^"."^s2 (* FIXME rec select *)  }}
  | s1=ATEXPR "." "[" s2=EXPR "]"                           {{  s1^".["^s2^"]"  }}
  | "_"                                                     {{ "\\_" }} (* FIXME this just because PATTERNs are EXPRs; FIXME remove if allowed in ident *)
  | "<fun>"                                                 {{ "<\\textit{fun}>" (* "{<{\\textit{fun}>}" *) }} (* for return values from ocaml toplevel *)
  | "(" w1=?w? s1=INFIXOP w2=?w? ")"                        {{ "("^(Tex.w w1)^s1^(Tex.w w2)^")" }}

EXPRA -> EXPR                                               {{ x1 }}
  | EXPR ?w? "," ?w? EXPRA                                  {{ x1^(Tex.w x2)^(c x3)^(Tex.w x4)^x5 }}

EXPRLIST ->
    EXPR                                                    {{ x1 }}
  | EXPR ?w? ";" ?w? EXPRLIST                               {{ x1^(Tex.w x2)^(c x3)^(Tex.w x4)^x5 }}


PATTERNMATCHING -> CASESB                                   {{ x1 }}
  | "|" w1=?w? x=CASESB                                     {{ "|"^(Tex.w w1)^x (* initial | *) }}

CASESB ->
  CASE                                                      {{ x1 }}
  | c1=CASE w1=?w? "|" w2=?w? cs=CASESB                     {{ c1^(Tex.w w1)^"|"^(Tex.w w2)^cs }}
(* above clause erroneously allows cases to start with a bar *)

CASE -> e1=PATTERN w1=?w? "->" w2=?w? e2=EXPR                {{ e1^(Tex.w w1)^"{\\rightarrow}"^(Tex.w w2)^e2^"" }}

MULTIPLEMATCHING -> PATTERNMATCHING                         {{ x1 }} (* FIXME *)

LETBINDING -> PATTERN ?w? "=" ?w? EXPR                      {{ x1^(Tex.w x2)^(c x3)^(Tex.w x4)^x5 }}



FNARGS -> ATEXPR ?w? ATEXPR                                 {{ x1^(Tex.w x2)^x3 }}
  | ATEXPR ?w? FNARGS                                       {{ x1^(Tex.w x2)^x3 }}

RECORD ->
    "<|" w1=?w? fs=FIELDS w2=?w? "|>"                       {{ "\\langle{}"^(Tex.w w1)^(fs)^(Tex.w w2)^"\\rangle{}" }}
  | "<|" w1=?w? i=ATEXPR w2=?w? "with" w3=?w? fs=FIELDS w4=?w? "|>" {{ "\\langle{}"^(Tex.w w1)^i^(Tex.w w2)^"\\textsf{with}"^(Tex.w w3)^fs^(Tex.w w4)^"\\rangle{}" }}

FIELDS ->
    FIELD                                                   {{ x1 }}
  | FIELD ?w? ";" ?w? FIELDS                                {{ x1^(Tex.w x2)^(c x3)^(Tex.w x4)^x5 }}

FIELD ->
    f=?ident? w1=?w? "=" w2=?w? e=EXPR                      {{ (Tex.valuename (c f))^(Tex.w w1)^"="^(Tex.w w2)^e }}


(* 6.8 Type and exception definitions *)

TYPEDEFINITION -> "type" w1=?w? s2=TYPEDEF                  {{ "\\textsf{type}"^(Tex.w w1)^s2 }}

TYPEDEF -> TYPECONSTRNAME ?w? TYPEINFORMATION
                                                            {{ x1^(Tex.w x2)^x3 }}
  | TYPECONSTRNAME ?w? TYPEPARAMS ?w? TYPEINFORMATION
                                                            {{ x1^(Tex.w x2)^(x3)^(Tex.w x4)^x5 }}
      (* FIXME what about params? may cause problems because hol lists params in order they occur in defn :( *)

TYPEPARAMS -> TYPEPARAM                                     {{ x1 }}
  | TYPEPARAM ?w? TYPEPARAMS                                {{ x1^(Tex.w x2)^x3 }}

OCAMLTYPEPARAMS -> TYPEPARAM                                {{ x1 }}
  | "(" ?w? TYPEPARAMSA ?w? ")"                             {{ "("^(c x2)^x3^(c x4)^")" }}

TYPEPARAMSA -> TYPEPARAM                                    {{ x1 }}
  | TYPEPARAM ?w? "," ?w? TYPEPARAMSA                       {{ x1^(Tex.w x2)^(c x3)^(Tex.w x4)^x5 }}

TYPEPARAM -> "'" ?ident?                                    {{ Tex.tyvar([x1;x2]|>ss_concat|>dest_Some|>c) }}

TYPECONSTRNAME -> ?ident?                                   {{ Tex._TYPECONSTRNAME (c x1) }}

TYPEINFORMATION -> TYPEEQUATION                             {{ x1 }}
  | TYPEREPRESENTATION                                      {{ x1 }}

TYPEEQUATION -> "=" ?w? TYPEXPR                             {{ "="^(Tex.w x2)^x3 }}

TYPEREPRESENTATION -> "=" ?w? CONSTRDECLS                   {{ "="^(Tex.w x2)^x3 }}
  | "=" w3=?w? "<|" w1=?w? s2=FIELDDECLS w2=?w? "|>"        {{ "="^(Tex.w w3)^"\\langle{}"^(Tex.w w1)^s2^(Tex.w w2)^"\\rangle{}" }}

CONSTRDECLS -> CONSTRDECL                                   {{ x1 }}
  | s1=CONSTRDECL w1=?w? "|" w2=?w? s2=CONSTRDECLS          {{ s1^(Tex.w w1)^"|"^(Tex.w w2)^s2 }}

CONSTRDECL -> CONSTRNAME                                    {{ x1 }}
  | s1=CONSTRNAME w1=?w? "of" w2=?w? s2=TYPEXPR             {{ s1^(Tex.w w1)^"\\textsf{of}"^(Tex.w w2)^s2 }}

CONSTRNAME -> ?_Ident?                                      {{ "\\textsf{"^(Tex._CONSTRNAME (c x1))^"}" }}

(* following can end in optional ; *)
FIELDDECLS -> FIELDDECLSA                                   {{ x1 }}
  | s1=FIELDDECLSA w1=?w? s2=";"                            {{ (s1^(Tex.w w1)^" "^(c s2)) }}

FIELDDECLSA -> FIELDDECL                                    {{ x1 }}
  | s1=FIELDDECL w1=?w? ";" w2=?w? s2=FIELDDECLSA           {{ s1^(Tex.w w1)^";"^(Tex.w w2)^s2 }}

(* FIXME the pattern is we map nonterms to strings; this causes lots of messing about with c and ^ *)

FIELDDECL -> s1=FIELDNAME w1=?w? ":" w2=?w? s2=POLYTYPEXPR  {{ s1^(Tex.w w1)^":"^(Tex.w w2)^s2 }}



>>g>>

#ifdef P4 
!_S
#endif


(*
Local Variables:
mode: tuareg
End:
*)
