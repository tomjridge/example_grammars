(* Specification of ABNF syntax. 

This follows RFC2234 closely (except that we desugar lists etc). We
probably have to refactor to get rid of the ambiguities with
whitespace etc and the need to preferentially parse longer spans.

*)

S -> ?ws? RULELIST ?ws?                              {{ x2 }}

(* ambiguity in rfc 2234: <<r = a b c \n ; comment>> 
the comment can attach to elements or be a separate rulelist_elt *)

RULELIST -> 
  | RULELIST_ELT RULELIST                            {{ match x2 with RULELIST(xs) -> RULELIST(x1 :: xs) }}
  | RULELIST_ELT                                     {{ RULELIST[x1] }}

RULELIST_ELT -> 
  | RULE                                             {{ RE_RULE(x1) }}
(*  | STAR_CWSP_CNL                                  {{ RE_CWSP_CNL(x1) }} *)
  | ?wsplus?                                         {{ RE_CWSP_CNL(x1) }}  
(* FIXME this change avoids ambiguity but doesn't allow isolated comments 
NOTE that allowing wsplus at end is a bit awful
*)

(* NOTE can start with ws; a bit horrible; CNL is "comment or
new-line"; CWSP is opt(CNL) ?wsp?; STAR_CWSP_CNL is (whitespace and
comment)s followed by CNL *)
STAR_CWSP_CNL -> 
  | CWSP STAR_CWSP_CNL                               {{ string_concat [x1;x2] }}
  | CNL                                              {{ x1 }}

(* NOTE in the following we should probably lift the ws to between the nonterms; 
- ELEMENTS are the definiendum of the RULE; 
- DEFINED_AS is whether to append to nt or define a new nt *)
RULE -> RULENAME DEFINED_AS ELEMENTS CNL             {{ RULE(x1,x2,x3,x4) }}

RULENAME -> ?rulename?                               {{ RULENAME x1 }}

(* can start with ws *)
DEFINED_AS -> 
  STAR_CWSP EQUAL_OR_EQUAL_SLASH STAR_CWSP           {{ x2 }}

(* can start with ws *)
STAR_CWSP -> 
  | CWSP STAR_CWSP                                   {{ () }}
  | ?eps?                                            {{ () }}

EQUAL_OR_EQUAL_SLASH -> 
  | "=/"                                             {{ DAS_EQUAL_SLASH }}
  | "="                                              {{ DAS_EQUAL }}

(* ELEMENTS is just an ALTERNATION followed by cwsp-s *)
ELEMENTS -> ALTERNATION STAR_CWSP                    {{ ELEMENTS(x1) }}

(* can start with whitespace *)
CWSP -> 
  | CNL ?wsp?                                        {{ string_concat [x1;x2] }}
  | ?wsp?                                            {{ x1 }}

CNL -> 
  | COMMENT                                          {{ x1 }}
  | ?crlf?                                           {{ x1 }}

COMMENT -> ";" STAR_WSP_VCHAR ?crlf?                 {{ string_concat [x1;x2;x3] }}

(* can start with whitespace; vchar is "visible char"? *)
STAR_WSP_VCHAR -> 
  | ?vchar? STAR_WSP_VCHAR                           {{ string_concat [x1;x2] }}
  | ?wsp? STAR_WSP_VCHAR                             {{ string_concat [x1;x2] }}
  | ?eps?                                            {{ x1 }}

(* a sequence of concatentations, separated by "/" *)
ALTERNATION -> CONCATENATION STAR_ALTERNATION_REST   {{ ALTERNATION(x1::x2) }}

(* can start with ws *)
STAR_ALTERNATION_REST -> 
  | STAR_CWSP "/" 
    STAR_CWSP CONCATENATION STAR_ALTERNATION_REST    {{ x4::x5 }}
  | ?eps?                                            {{ [] }}

(* REPETITION is an element with an optional repeat prefix *)
CONCATENATION -> REPETITION STAR_CONCATENATION_REST  {{ CONCATENATION(x1::x2) }}

(* tail of a concatentation... an optional concatentation *)
STAR_CONCATENATION_REST -> 
  | ONE_STAR_CWSP REPETITION STAR_CONCATENATION_REST {{ x2::x3 }}
  | ?eps?                                            {{ [] }}

ONE_STAR_CWSP -> CWSP STAR_CWSP                      {{ () }}

REPETITION -> 
  | REPEAT ELEMENT                                   {{ REP(Some(x1),x2) }}
  | ELEMENT                                          {{ REP(None,x1) }}

REPEAT -> ?repeat?                                   {{ REPEAT }}

(* The different types of element forming part of the rule
definiendum; fairly self-explanatory *)
ELEMENT ->
  | RULENAME                                         {{ EL_RULENAME x1 }}
  | GROUP                                            {{ EL_GROUP x1 }}
  | OPTION                                           {{ EL_OPTION x1 }}
  | CHAR_VAL                                         {{ EL_CHAR_VAL }}
  | NUM_VAL                                          {{ EL_NUM_VAL }}
  | PROSE_VAL                                        {{ EL_PROSE_VAL }}

GROUP -> "(" STAR_CWSP ALTERNATION STAR_CWSP ")"     {{ GROUP(x3) }}

OPTION -> "[" STAR_CWSP ALTERNATION STAR_CWSP "]"    {{ OPTION(x3) }}

(*char-val       =  DQUOTE *(%x20-21 / %x23-7E) DQUOTE
                               ; quoted string of SP and VCHAR
                               ; without DQUOTE *)
CHAR_VAL -> ?dquote? ?char_vals? ?dquote?            {{ string_concat [x1;x2;x3] }}

NUM_VAL -> "%" NUM_VAL_REST                          {{ string_concat [x1;x2] }}

NUM_VAL_REST ->
  | BIN_VAL                                          {{ x1 }}
  | DEC_VAL                                          {{ x1 }}
  | HEX_VAL                                          {{ x1 }}

BIN_VAL -> "b" ?one_star_bit? ?bin_val_rest?         {{ string_concat [x1;x2;x3] }}

DEC_VAL -> "d" ?one_star_digit? ?dec_val_rest?       {{ string_concat [x1;x2;x3] }}

HEX_VAL -> "x" ?one_star_hexdig? ?hex_val_rest?      {{ string_concat [x1;x2;x3] }}

PROSE_VAL -> "<" ?prose_val_chars? ">"               {{ x2 }}